{
  "React Native Component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rncomponent",
    "body": [
      "import { View, Text, StyleSheet, TouchableOpacity } from 'react-native'",
      "import React, { type FC } from 'react'",
      "",
      "export interface $1Props {}",
      "",
      "const $1: FC<$1Props> = ({}) => {",
      "  return (",
      "    <View style={styles.container}>",
      "      <Text>$1</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {},",
      "})",
      "",
      "export default $1",
    ],
    "description": "React Native Component boilerplate",
  },
  "React Native Storybook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rnstorybook",
    "body": [
      "import type { Meta, StoryObj } from '@storybook/react'",
      "",
      "import { ContainerDecorator, globalMocks } from '@/features/storybook'",
      "",
      "import Component from './$1'",
      "",
      "const meta = {",
      "  component: Component,",
      "  argTypes: {},",
      "  args: {},",
      "  decorators: [ContainerDecorator],",
      "  parameters: {",
      "    apolloClient: {",
      "      mocks: [...globalMocks],",
      "    },",
      "  },",
      "} satisfies Meta<typeof Component>",
      "",
      "export default meta",
      "",
      "type Story = StoryObj<typeof meta>",
      "",
      "export const Default: Story = {}",
    ],
    "description": "React Native Storybook boilerplate",
  },
  "React Native Bottom Sheet": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "rnbottomsheet",
    "body": [
      "import { StyleSheet } from 'react-native'",
      "import React, { forwardRef, useImperativeHandle, useRef } from 'react'",
      "",
      "import { useSafeAreaInsets } from 'react-native-safe-area-context'",
      "import { BottomSheetModal, BottomSheetModalProps } from '@gorhom/bottom-sheet'",
      "",
      "import { BlurryBottomSheetModal } from '@/features/bottom-sheets'",
      "",
      "export interface $1Props extends Omit<BottomSheetModalProps, 'children'> {}",
      "",
      "export type $1Ref = Pick<BottomSheetModal, 'dismiss' | 'present'>",
      "",
      "const $1 = forwardRef<$1Ref, $1Props>((props, ref) => {",
      "  const insets = useSafeAreaInsets()",
      "",
      "  const sheetRef = useRef<BottomSheetModal>(null)",
      "  useImperativeHandle(",
      "    ref,",
      "    () => ({",
      "      present(data: any) {",
      "        sheetRef.current?.present(data)",
      "      },",
      "      dismiss() {",
      "        sheetRef.current?.dismiss()",
      "      },",
      "    }),",
      "    [],",
      "  )",
      "",
      "  return (",
      "    <BlurryBottomSheetModal",
      "      ref={sheetRef}",
      "      snapPoints={['90%']}",
      "      enablePanDownToClose",
      "      keyboardBlurBehavior={'restore'}",
      "    ></BlurryBottomSheetModal>",
      "  )",
      "})",
      "",
      "$1.displayName = '$1'",
      "",
      "const styles = StyleSheet.create({})",
      "",
      "export default $1",
    ],
    "description": "React Native Bottom Sheet component boilerplate",
  },
  "Zustand Slice Template": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "zustandSlice",
    "body": [
      "import { StateCreator } from 'zustand'",
      "",
      "type State = {",
      "}",
      "",
      "type Actions = {",
      "}",
      "",
      "export interface ${1}Slice extends State, Actions {}",
      "",
      "const create${1}Slice: StateCreator<${1}Slice> = (set) => ({",
      "  $4",
      "})",
      "",
      "export default create${1}Slice",
    ],
    "description": "Scaffold for creating a Zustand slice.",
  },
}
